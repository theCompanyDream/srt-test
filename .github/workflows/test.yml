name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

jobs:
  # Test across multiple Go versions
  test:
    name: Test Go ${{ matrix.go-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.20", "1.21", "1.22", "1.23", "1.24"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      # Run tests in your tests directory
      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage-${{ matrix.go-version }}.out ./tests/...

      # Run any integration tests if you have them
      - name: Run integration tests
        run: |
          if [ -d "tests/integration" ]; then
            go test -v ./tests/integration/...
          fi

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go-version }}
          path: coverage-${{ matrix.go-version }}.out

  # Consolidate coverage from all Go versions
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download coverage files
        uses: actions/download-artifact@v4
        with:
          name: coverage-${{ env.GO_VERSION }}

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage-${{ env.GO_VERSION }}.out -o coverage.html

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-${{ env.GO_VERSION }}.out
          flags: unittests
          name: codecov-umbrella

      - name: Coverage summary
        run: |
          echo "## ðŸ“Š Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage-${{ env.GO_VERSION }}.out | tail -n 1 >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Full coverage report available in artifacts." >> $GITHUB_STEP_SUMMARY
